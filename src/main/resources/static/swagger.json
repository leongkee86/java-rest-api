{"openapi":"3.0.1","info":{"title":"Server APIs (Java + MongoDB)","description":"## Hi. I am Lim Leong Kee, the sole designer and developer of this project.\n\n- 🖥️ **Backend Tech Stack:** Java | Spring Boot | MongoDB | Docker\n\n- 🌐 **Frontend Tech Stack:** Customized Swagger UI | HTML | CSS | JavaScript\n\nI have developed the entire set of server-side APIs using **Java**, with **MongoDB** as the underlying database. These APIs are fully documented and available for exploration and interaction directly on this page.\n\nOnce you have registered and logged in to your account, you will be able to:\n\n  - 🎮 Play games: 1. Guess Number | 2. Arrange Numbers | 3. Rock Paper Scissors (Practice and Challenge modes)\n\n  - 🎁 Claim your bonus points once they are available\n\n  - 🏆 Check the leaderboard\n\n  - 👤 View your own or any other user's game profiles\n\n  - ⚙️ Manage your account settings\n\n> All API endpoints are interactive, always ready to use (no \"Try it out\" button needed), and can be tried out directly on this page!\n\nAdditionally, I customized this Swagger UI by integrating my own **HTML**, **CSS**, and **JavaScript** files to provide the following features:\n\n1. 🔐 Automatically captures the JWT token upon successful login, stores it in local storage for seamless login on return visits, injects it into all requests targeting protected API endpoints, and updates the Swagger UI authorization dialog to reflect the current authentication state.\n\n2. 🚪 Extended Swagger UI's logout function to mirror the behavior of the logout API endpoint — clearing the stored JWT token, resetting the user's authentication state, and clearing the Swagger UI authorization dialog for consistent logout behavior.\n\n3. 👤 Displays login status — including username and score if logged in, or a guest message — fixed at the top-right corner of the page, always visible when scrolling.\n\n4. ✨ Automatically enables \"Try it out\" mode for all API operations to be always ready to use, and hides all “Try it out” buttons since they are no longer necessary, resulting in a cleaner interface.\n\n5. 🧩 Implements custom sorting logic for API operations to improve navigation and make the interface more user-friendly.\n\nI sincerely appreciate any feedback, suggestions, or improvements you may have. Thank you for taking the time to review my work.\n\n**My Cocos Creator Projects:** [Space Shooter Game](https://leongkee-space-shooter.onrender.com) | [Thai Hi-Lo Game](https://thaihilo-web.onrender.com) ( Login Details — Username: demo | Password: demo )\n","contact":{"name":"Lim Leong Kee","email":"leongkee86@gmail.com"},"version":"0.0.3"},"servers":[{"url":"http://localhost:8080","description":""}],"tags":[{"name":"Auth APIs — POST : application/x-www-form-urlencoded (Scroll down for JSON version)"},{"name":"User APIs — GET : Query, Path | PUT : application/x-www-form-urlencoded (Scroll down for JSON version)"},{"name":"Game APIs — GET : Query | POST : application/x-www-form-urlencoded (Scroll down for JSON version)"},{"name":"Auth APIs — POST : application/json"},{"name":"User APIs — GET : Query, Path | PUT : application/json"},{"name":"Game APIs — GET : Query | POST : application/json"}],"paths":{"/api/user/form/changePassword":{"put":{"tags":["User APIs — GET : Query, Path | PUT : application/x-www-form-urlencoded (Scroll down for JSON version)"],"summary":"Change the password of your account.","description":"Change the password of your account.","operationId":"2_4","parameters":[{"name":"password","in":"query","required":true,"schema":{"maxLength":2147483647,"minLength":3,"type":"string"}}],"responses":{"401":{"description":"Unauthorized — invalid or missing token"},"200":{"description":"OK"}},"security":[{"bearerAuth":[]}]}},"/api/user/form/changeDisplayName":{"put":{"tags":["User APIs — GET : Query, Path | PUT : application/x-www-form-urlencoded (Scroll down for JSON version)"],"summary":"Change the display name of your account.","description":"Change the display name of your account.","operationId":"2_3","parameters":[{"name":"displayName","in":"query","required":true,"schema":{"maxLength":2147483647,"minLength":3,"type":"string"}}],"responses":{"401":{"description":"Unauthorized — invalid or missing token"},"200":{"description":"OK"}},"security":[{"bearerAuth":[]}]}},"/api/user/changePassword":{"put":{"tags":["User APIs — GET : Query, Path | PUT : application/json"],"summary":"Change the password of your account.","description":"Change the password of your account.","operationId":"2_4_1","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChangePasswordRequest"}}},"required":true},"responses":{"401":{"description":"Unauthorized — invalid or missing token"},"200":{"description":"OK"}},"security":[{"bearerAuth":[]}]}},"/api/user/changeDisplayName":{"put":{"tags":["User APIs — GET : Query, Path | PUT : application/json"],"summary":"Change the display name of your account.","description":"Change the display name of your account.","operationId":"2_3_1","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChangeDisplayNameRequest"}}},"required":true},"responses":{"401":{"description":"Unauthorized — invalid or missing token"},"200":{"description":"OK"}},"security":[{"bearerAuth":[]}]}},"/api/game/rockPaperScissors/practise":{"post":{"tags":["Game APIs — GET : Query | POST : application/json"],"summary":"Practise the Rock Paper Scissors game for fun.","description":"Practise the Rock Paper Scissors game for fun. No points to earn. The number of attempts will not increase with each play.\n\nSelect your choice — Rock, Paper or Scissors — from the drop-down list in the `yourChoice` field. Rock beats Scissors. Scissors beats Paper. Paper beats Rock.\n\nThen, press the **Execute** button and see the result of the game.\n","operationId":"3_4","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PractiseRockPaperScissorsRequest"}}},"required":true},"responses":{"403":{"description":"Forbidden"},"401":{"description":"Unauthorized — invalid or missing token"},"200":{"description":"OK"},"400":{"description":"Invalid input"}},"security":[{"bearerAuth":[]}]}},"/api/game/rockPaperScissors/challenge":{"post":{"tags":["Game APIs — GET : Query | POST : application/json"],"summary":"Play the Rock Paper Scissors game with another user. Use this endpoint to start a new round or continue the current round to play the game.","description":"**Important:** You must have at least 1 point to play this game. If you do not have enough points, you can play other games to earn points or claim bonus points if you have not claimed them yet.\n\n1. The `opponentUsername` field is **optional**. You may choose a specific opponent by entering the opponent's username in the `opponentUsername` field or let the system find a random opponent with enough points (see **step 4**) by leaving the `opponentUsername` field empty.\n\n2. Select your choice — Rock, Paper or Scissors — from the drop-down list in the `yourChoice` field.\n> Rock beats Scissors.\n> Scissors beats Paper.\n> Paper beats Rock.\n\n3. Enter how many points that you want to stake in the `pointsToStake` field. If you win, you will receive the staked points from the opponent. If you lose, you will transfer the staked points to the opponent.\n\n4. If you leave the `opponentUsername` field empty, the system will automatically select a random opponent whose score is greater than or equal to the number of points that you entered in the `pointsToStake` field.\n\n5. Press the **Execute** button and see the result of the game.\n","operationId":"3_5","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PlayRockPaperScissorsRequest"}}},"required":true},"responses":{"403":{"description":"Forbidden"},"401":{"description":"Unauthorized — invalid or missing token"},"200":{"description":"OK"},"400":{"description":"Invalid input"}},"security":[{"bearerAuth":[]}]}},"/api/game/guessNumber":{"post":{"tags":["Game APIs — GET : Query | POST : application/json"],"summary":"Guess a number from 1 to 100 in this game. Use this endpoint to start a new round or continue the current round to play","description":"Guess and enter a number **from 1 to 100** in the `yourGuessedNumber` field. Then, press the **Execute** button and see the result of the game.\n\n### In each round, there are 3 hidden numbers.\n- **Basic Number**: Gives a hint after each wrong guess. If correctly guessed, awards +1 point and complete the round.\n- **Secret Number**: No hints provided. If correctly guessed, awards +3 points and complete the round.\n- **Trap Number**: No hints provided. If unfortunately guessed, lose 1 point but the round continues.\n\n> Your goal is to guess either the Basic Number or Secret Number to complete the round — but beware of the Trap Number!\n","operationId":"3_2","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GuessNumberRequest"}}},"required":true},"responses":{"400":{"description":"Invalid input — number must be between 1 and 100"},"401":{"description":"Unauthorized — invalid or missing token"},"200":{"description":"OK"},"403":{"description":"Forbidden — guessing is not allowed at this time"}},"security":[{"bearerAuth":[]}]}},"/api/game/form/rockPaperScissors/practise":{"post":{"tags":["Game APIs — GET : Query | POST : application/x-www-form-urlencoded (Scroll down for JSON version)"],"summary":"Practise the Rock Paper Scissors game for fun.","description":"Practise the Rock Paper Scissors game for fun. No points to earn. The number of attempts will not increase with each play.\n\nSelect your choice — Rock, Paper or Scissors — from the drop-down list in the `yourChoice` field. Rock beats Scissors. Scissors beats Paper. Paper beats Rock.\n\nThen, press the **Execute** button and see the result of the game.\n","operationId":"3_4_1","parameters":[{"name":"yourChoice","in":"query","description":"Select your choice","required":true,"schema":{"type":"string","default":"Rock","enum":["Rock","Paper","Scissors"]}}],"responses":{"403":{"description":"Forbidden"},"401":{"description":"Unauthorized — invalid or missing token"},"200":{"description":"OK"},"400":{"description":"Invalid input"}},"security":[{"bearerAuth":[]}]}},"/api/game/form/rockPaperScissors/challenge":{"post":{"tags":["Game APIs — GET : Query | POST : application/x-www-form-urlencoded (Scroll down for JSON version)"],"summary":"Play the Rock Paper Scissors game with another user. Use this endpoint to start a new round or continue the current round to play the game.","description":"**Important:** You must have at least 1 point to play this game. If you do not have enough points, you can play other games to earn points or claim bonus points if you have not claimed them yet.\n\n1. The `opponentUsername` field is **optional**. You may choose a specific opponent by entering the opponent's username in the `opponentUsername` field or let the system find a random opponent with enough points (see **step 4**) by leaving the `opponentUsername` field empty.\n\n2. Select your choice — Rock, Paper or Scissors — from the drop-down list in the `yourChoice` field.\n> Rock beats Scissors.\n> Scissors beats Paper.\n> Paper beats Rock.\n\n3. Enter how many points that you want to stake in the `pointsToStake` field. If you win, you will receive the staked points from the opponent. If you lose, you will transfer the staked points to the opponent.\n\n4. If you leave the `opponentUsername` field empty, the system will automatically select a random opponent whose score is greater than or equal to the number of points that you entered in the `pointsToStake` field.\n\n5. Press the **Execute** button and see the result of the game.\n","operationId":"3_5_1","parameters":[{"name":"opponentUsername","in":"query","description":"The username of the opponent that you choose to challenge","required":false,"schema":{"type":"string"}},{"name":"yourChoice","in":"query","description":"Select your choice","required":true,"schema":{"type":"string","default":"Rock","enum":["Rock","Paper","Scissors"]}},{"name":"pointsToStake","in":"query","description":"The number of points that you want to stake","required":true,"schema":{"type":"integer","format":"int32","default":1}}],"responses":{"403":{"description":"Forbidden"},"401":{"description":"Unauthorized — invalid or missing token"},"200":{"description":"OK"},"400":{"description":"Invalid input"}},"security":[{"bearerAuth":[]}]}},"/api/game/form/guessNumber":{"post":{"tags":["Game APIs — GET : Query | POST : application/x-www-form-urlencoded (Scroll down for JSON version)"],"summary":"Guess a number from 1 to 100 in this game. Use this endpoint to start a new round or continue the current round to play","description":"Guess and enter a number **from 1 to 100** in the `yourGuessedNumber` field. Then, press the **Execute** button and see the result of the game.\n\n### In each round, there are 3 hidden numbers.\n- **Basic Number**: Gives a hint after each wrong guess. If correctly guessed, awards +1 point and complete the round.\n- **Secret Number**: No hints provided. If correctly guessed, awards +3 points and complete the round.\n- **Trap Number**: No hints provided. If unfortunately guessed, lose 1 point but the round continues.\n\n> Your goal is to guess either the Basic Number or Secret Number to complete the round — but beware of the Trap Number!\n","operationId":"3_2_1","parameters":[{"name":"yourGuessedNumber","in":"query","description":"Guess a number from 1 to 100","required":true,"schema":{"type":"integer","format":"int32","default":50}}],"responses":{"400":{"description":"Invalid input — number must be between 1 and 100"},"401":{"description":"Unauthorized — invalid or missing token"},"200":{"description":"OK"},"403":{"description":"Forbidden — guessing is not allowed at this time"}},"security":[{"bearerAuth":[]}]}},"/api/game/form/claimBonusPoints":{"post":{"tags":["Game APIs — GET : Query | POST : application/x-www-form-urlencoded (Scroll down for JSON version)"],"summary":"Claim bonus points once every 3 hours.","description":"You can claim +1 bonus point every 3 hours. There is a 50% chance to receive +2 points instead!\n\nOnce claimed, the bonus point(s) will be added to your current score.\n\nAfter claiming, you must wait for 3 hours before you are eligible to claim the next bonus points.\n","operationId":"3_6","responses":{"401":{"description":"Unauthorized — invalid or missing token"},"425":{"description":"Too Early — Bonus points already claimed"},"200":{"description":"OK"}},"security":[{"bearerAuth":[]}]}},"/api/game/form/arrangeNumbers":{"post":{"tags":["Game APIs — GET : Query | POST : application/x-www-form-urlencoded (Scroll down for JSON version)"],"summary":"Guess the sequence of 5 numbers in this game. Use this endpoint to start a new round or continue the current round to play.","description":"Guess and enter the sequence of the 5 valid numbers **1, 2, 3, 4, and 5** in the `yourGuessedNumber` field. The sequence can be any arrangement of these numbers **without repetition** (for example: 4, 3, 5, 1, 2). Then, press the **Execute** button and see the result of the game.\n\n### Hints you will receive after each wrong guess:\n- **[X]**: Number X is in the **correct** position.\n- **-X-**: Number X is in the **wrong** position.\n\n> Your goal is to enter the 5 valid numbers without repetition in the sequence defined by the game for the current round to complete the round. Completing a round awards you +2 points.\n","operationId":"3_3","parameters":[{"name":"yourArrangedNumbers","in":"query","description":"Guess the sequence of the 5 numbers defined by the game for the current round","required":true,"schema":{"maxItems":5,"minItems":5,"type":"array","items":{"type":"integer","format":"int32"},"default":[1,2,3,4,5]}}],"responses":{"401":{"description":"Unauthorized — invalid or missing token"},"400":{"description":"Invalid input — must be exactly 5 numbers between 1 and 5"},"200":{"description":"OK"},"403":{"description":"Forbidden — guessing is not allowed at this time"}},"security":[{"bearerAuth":[]}]}},"/api/game/claimBonusPoints":{"post":{"tags":["Game APIs — GET : Query | POST : application/json"],"summary":"Claim bonus points once every 3 hours.","description":"You can claim +1 bonus point every 3 hours. There is a 50% chance to receive +2 points instead!\n\nOnce claimed, the bonus point(s) will be added to your current score.\n\nAfter claiming, you must wait for 3 hours before you are eligible to claim the next bonus points.\n","operationId":"3_6_1","responses":{"401":{"description":"Unauthorized — invalid or missing token"},"425":{"description":"Too Early — Bonus points already claimed"},"200":{"description":"OK"}},"security":[{"bearerAuth":[]}]}},"/api/game/arrangeNumbers":{"post":{"tags":["Game APIs — GET : Query | POST : application/json"],"summary":"Guess the sequence of 5 numbers in this game. Use this endpoint to start a new round or continue the current round to play.","description":"Guess and enter the sequence of the 5 valid numbers **1, 2, 3, 4, and 5** in the `yourGuessedNumber` field. The sequence can be any arrangement of these numbers **without repetition** (for example: 4, 3, 5, 1, 2). Then, press the **Execute** button and see the result of the game.\n\n### Hints you will receive after each wrong guess:\n- **[X]**: Number X is in the **correct** position.\n- **-X-**: Number X is in the **wrong** position.\n\n> Your goal is to enter the 5 valid numbers without repetition in the sequence defined by the game for the current round to complete the round. Completing a round awards you +2 points.\n","operationId":"3_3_1","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ArrangeNumbersRequest"}}},"required":true},"responses":{"401":{"description":"Unauthorized — invalid or missing token"},"400":{"description":"Invalid input — must be exactly 5 numbers between 1 and 5"},"200":{"description":"OK"},"403":{"description":"Forbidden — guessing is not allowed at this time"}},"security":[{"bearerAuth":[]}]}},"/api/auth/register":{"post":{"tags":["Auth APIs — POST : application/json"],"summary":"Registers for a new user account.","description":"Registers for a new user account.\n\n### Request body must include:\n- `username` (unique)\n- `password`\n\nThe `displayName` field is **optional**. If it is missing or empty, the `username` will be used as the `displayName`.\n\n> Once registered successfully, you can log in using the `/api/auth/login` endpoint to receive a JWT token.\n","operationId":"1_1","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RegisterRequest"}}},"required":true},"responses":{"200":{"description":"Successful registration"},"400":{"description":"Invalid input"}}}},"/api/auth/logout":{"post":{"tags":["Auth APIs — POST : application/json"],"summary":"Log out of your current user account.","description":"Log out from the user account that you are currently logged in to.","operationId":"1_3","responses":{"401":{"description":"Unauthorized — invalid or missing token"},"200":{"description":"Successful logout"},"404":{"description":"User not found"}},"security":[{"bearerAuth":[]}]}},"/api/auth/login":{"post":{"tags":["Auth APIs — POST : application/json"],"summary":"Log in to an existing user account.","description":"Authenticates a user with username and password.\n\nUpon successful authentication, a JWT access token is returned in the `token` field.\n\n<s>**How to use the token in Swagger UI:**</s>\n\n<s>1. Copy the `token` from the response.</s>\n\n<s>2. Click the **Authorize** button (top right in Swagger UI).</s>\n\n<s>3. Paste the token into the `value` input field.</s>\n\n<s>4. Click **Authorize** — now your requests will include the token.</s>\n\n**Important:** I have implemented automation that automatically sets the JWT access token in Swagger UI’s Authorization header. As a result, users no longer need to manually click the 'Authorize' button and paste the token.\n","operationId":"1_2","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LoginRequest"}}},"required":true},"responses":{"200":{"description":"Successful login"},"400":{"description":"Invalid input"}}}},"/api/auth/form/register":{"post":{"tags":["Auth APIs — POST : application/x-www-form-urlencoded (Scroll down for JSON version)"],"summary":"Registers for a new user account.","description":"Registers for a new user account.\n\n### Request body must include:\n- `username` (unique)\n- `password`\n\nThe `displayName` field is **optional**. If it is missing or empty, the `username` will be used as the `displayName`.\n\n> Once registered successfully, you can log in using the `/api/auth/login` endpoint to receive a JWT token.\n","operationId":"1_1_1","parameters":[{"name":"username","in":"query","required":true,"schema":{"maxLength":2147483647,"minLength":3,"type":"string"}},{"name":"password","in":"query","required":true,"schema":{"maxLength":2147483647,"minLength":3,"type":"string"}},{"name":"displayName","in":"query","required":false,"schema":{"type":"string"}}],"responses":{"200":{"description":"Successful registration"},"400":{"description":"Invalid input"}}}},"/api/auth/form/logout":{"post":{"tags":["Auth APIs — POST : application/x-www-form-urlencoded (Scroll down for JSON version)"],"summary":"Log out of your current user account.","description":"Log out from the user account that you are currently logged in to.","operationId":"1_3_1","responses":{"401":{"description":"Unauthorized — invalid or missing token"},"200":{"description":"Successful logout"},"404":{"description":"User not found"}},"security":[{"bearerAuth":[]}]}},"/api/auth/form/login":{"post":{"tags":["Auth APIs — POST : application/x-www-form-urlencoded (Scroll down for JSON version)"],"summary":"Log in to an existing user account.","description":"Authenticates a user with username and password.\n\nUpon successful authentication, a JWT access token is returned in the `token` field.\n\n<s>**How to use the token in Swagger UI:**</s>\n\n<s>1. Copy the `token` from the response.</s>\n\n<s>2. Click the **Authorize** button (top right in Swagger UI).</s>\n\n<s>3. Paste the token into the `value` input field.</s>\n\n<s>4. Click **Authorize** — now your requests will include the token.</s>\n\n**Important:** I have implemented automation that automatically sets the JWT access token in Swagger UI’s Authorization header. As a result, users no longer need to manually click the 'Authorize' button and paste the token.\n","operationId":"1_2_1","parameters":[{"name":"username","in":"query","required":true,"schema":{"type":"string"}},{"name":"password","in":"query","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Successful login"},"400":{"description":"Invalid input"}}}},"/api/user/profile":{"get":{"tags":["User APIs — GET : Query, Path | PUT : application/json"],"summary":"View your own game profile.","description":"View the information of your own game profile.\n","operationId":"2_1","responses":{"200":{"description":"Game profile retrieved successfully"},"401":{"description":"Unauthorized — invalid or missing token"},"404":{"description":"User not found"}},"security":[{"bearerAuth":[]}]}},"/api/user/profile/{username}":{"get":{"tags":["User APIs — GET : Query, Path | PUT : application/json"],"summary":"View a specific user's game profile.","description":"View the information of a specific user's game profile by providing their `username`.\n","operationId":"2_1_1","parameters":[{"name":"username","in":"path","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Game profile retrieved successfully"},"404":{"description":"User not found"}}}},"/api/user/form/profile":{"get":{"tags":["User APIs — GET : Query, Path | PUT : application/x-www-form-urlencoded (Scroll down for JSON version)"],"summary":"View your own game profile.","description":"View the information of your own game profile.\n","operationId":"2_1_2","responses":{"200":{"description":"Game profile retrieved successfully"},"401":{"description":"Unauthorized — invalid or missing token"},"404":{"description":"User not found"}},"security":[{"bearerAuth":[]}]}},"/api/user/form/profile/{username}":{"get":{"tags":["User APIs — GET : Query, Path | PUT : application/x-www-form-urlencoded (Scroll down for JSON version)"],"summary":"View a specific user's game profile.","description":"View the information of a specific user's game profile by providing their `username`.\n","operationId":"2_1_3","parameters":[{"name":"username","in":"path","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Game profile retrieved successfully"},"404":{"description":"User not found"}}}},"/api/user/form/filterAndSort":{"get":{"tags":["User APIs — GET : Query, Path | PUT : application/x-www-form-urlencoded (Scroll down for JSON version)"],"summary":"Get a filtered, sorted, and paginated list of users.","description":"Retrieves a paginated list of users filtered using **optional** parameters: minimum score (`minimumScore`), maximum score (`maximumScore`), and case-insensitive **username** keyword matching (`usernameKeyword`). Results are sorted in ascending or descending order based on the **required** `sortDirection` parameter.\n\nSupports **optional pagination** using the `page` (1-based) and `limit` query parameters to control the page number and the number of results per page.\n\nIf only `limit` is provided (without `page`), the first `limit` number of filtered users will be returned. For example, `limit=10` returns the first 10 filtered users.\n","operationId":"2_2","parameters":[{"name":"minimumScore","in":"query","required":false,"schema":{"type":"integer","format":"int32"}},{"name":"maximumScore","in":"query","required":false,"schema":{"type":"integer","format":"int32"}},{"name":"usernameKeyword","in":"query","required":false,"schema":{"type":"string"}},{"name":"sortDirection","in":"query","required":true,"schema":{"type":"string","default":"Ascending","enum":["Ascending","Descending"]}},{"name":"page","in":"query","required":false,"schema":{"type":"integer","format":"int32"}},{"name":"limit","in":"query","required":false,"schema":{"type":"integer","format":"int32"}}],"responses":{"200":{"description":"OK"},"400":{"description":"Invalid input"}}}},"/api/user/filterAndSort":{"get":{"tags":["User APIs — GET : Query, Path | PUT : application/json"],"summary":"Get a filtered, sorted, and paginated list of users.","description":"Retrieves a paginated list of users filtered using **optional** parameters: minimum score (`minimumScore`), maximum score (`maximumScore`), and case-insensitive **username** keyword matching (`usernameKeyword`). Results are sorted in ascending or descending order based on the **required** `sortDirection` parameter.\n\nSupports **optional pagination** using the `page` (1-based) and `limit` query parameters to control the page number and the number of results per page.\n\nIf only `limit` is provided (without `page`), the first `limit` number of filtered users will be returned. For example, `limit=10` returns the first 10 filtered users.\n","operationId":"2_2_1","parameters":[{"name":"minimumScore","in":"query","required":false,"schema":{"type":"integer","format":"int32"}},{"name":"maximumScore","in":"query","required":false,"schema":{"type":"integer","format":"int32"}},{"name":"usernameKeyword","in":"query","required":false,"schema":{"type":"string"}},{"name":"sortDirection","in":"query","required":true,"schema":{"type":"string","default":"Ascending","enum":["Ascending","Descending"]}},{"name":"page","in":"query","required":false,"schema":{"type":"integer","format":"int32"}},{"name":"limit","in":"query","required":false,"schema":{"type":"integer","format":"int32"}}],"responses":{"200":{"description":"OK"},"400":{"description":"Invalid input"}}}},"/api/game/leaderboard":{"get":{"tags":["Game APIs — GET : Query | POST : application/json"],"summary":"Get the top users from the leaderboard.","description":"Retrieves a paginated list of users sorted by their **score** in descending order. When scores are equal, users are secondarily sorted by **attempts** (ascending) and then by **rounds** (ascending).\n\nSupports **optional pagination** using the `page` (1-based) and `limit` query parameters to control the page number and the number of results per page.\n\nIf only `limit` is provided (without `page`), the first `limit` number of users will be returned. For example, `limit=10` returns the top 10 users.\n","operationId":"3_1","parameters":[{"name":"page","in":"query","required":false,"schema":{"type":"integer","format":"int32"}},{"name":"limit","in":"query","required":false,"schema":{"type":"integer","format":"int32"}}],"responses":{"200":{"description":"OK"},"400":{"description":"Invalid input"}}}},"/api/game/form/leaderboard":{"get":{"tags":["Game APIs — GET : Query | POST : application/x-www-form-urlencoded (Scroll down for JSON version)"],"summary":"Get the top users from the leaderboard.","description":"Retrieves a paginated list of users sorted by their **score** in descending order. When scores are equal, users are secondarily sorted by **attempts** (ascending) and then by **rounds** (ascending).\n\nSupports **optional pagination** using the `page` (1-based) and `limit` query parameters to control the page number and the number of results per page.\n\nIf only `limit` is provided (without `page`), the first `limit` number of users will be returned. For example, `limit=10` returns the top 10 users.\n","operationId":"3_1_1","parameters":[{"name":"page","in":"query","required":false,"schema":{"type":"integer","format":"int32"}},{"name":"limit","in":"query","required":false,"schema":{"type":"integer","format":"int32"}}],"responses":{"200":{"description":"OK"},"400":{"description":"Invalid input"}}}},"/api/user/form/deleteAccount":{"delete":{"tags":["User APIs — GET : Query, Path | PUT : application/x-www-form-urlencoded (Scroll down for JSON version)"],"summary":"Delete your account permanently.","description":"Delete your account permanently.","operationId":"2_5","responses":{"401":{"description":"Unauthorized — invalid or missing token"},"200":{"description":"OK"}},"security":[{"bearerAuth":[]}]}},"/api/user/deleteAccount":{"delete":{"tags":["User APIs — GET : Query, Path | PUT : application/json"],"summary":"Delete your account permanently.","description":"Delete your account permanently.","operationId":"2_5_1","responses":{"401":{"description":"Unauthorized — invalid or missing token"},"200":{"description":"OK"}},"security":[{"bearerAuth":[]}]}}},"components":{"schemas":{"ChangePasswordRequest":{"required":["password"],"type":"object","properties":{"password":{"maxLength":2147483647,"minLength":3,"type":"string"}}},"ChangeDisplayNameRequest":{"required":["displayName"],"type":"object","properties":{"displayName":{"maxLength":2147483647,"minLength":3,"type":"string"}}},"PractiseRockPaperScissorsRequest":{"required":["yourChoice"],"type":"object","properties":{"yourChoice":{"type":"string","enum":["Rock","Paper","Scissors"]}}},"PlayRockPaperScissorsRequest":{"required":["yourChoice"],"type":"object","properties":{"opponentUsername":{"type":"string"},"yourChoice":{"type":"string","enum":["Rock","Paper","Scissors"]},"pointsToStake":{"minimum":1,"type":"integer","format":"int32"}}},"GuessNumberRequest":{"type":"object","properties":{"yourGuessedNumber":{"maximum":100,"minimum":1,"type":"integer","format":"int32","example":50}}},"ArrangeNumbersRequest":{"required":["yourArrangedNumbers"],"type":"object","properties":{"yourArrangedNumbers":{"maxItems":5,"minItems":5,"type":"array","example":[1,2,3,4,5],"items":{"type":"integer","format":"int32"}}}},"RegisterRequest":{"required":["password","username"],"type":"object","properties":{"username":{"minLength":1,"type":"string"},"password":{"minLength":1,"type":"string"},"displayName":{"type":"string"}}},"LoginRequest":{"required":["password","username"],"type":"object","properties":{"username":{"minLength":1,"type":"string"},"password":{"minLength":1,"type":"string"}}}},"securitySchemes":{"bearerAuth":{"type":"http","scheme":"bearer","bearerFormat":"JWT"}}}}